# -*- coding: utf-8 -*-
"""
Spyder Editor

This is a temporary script file.
"""

import pickle
import streamlit as st
from streamlit_option_menu import option_menu
from fpdf import FPDF
import base64
from pathlib import Path
import streamlit_authenticator as stauth  



st.set_page_config(page_title="Multiple disease prediction", page_icon=":bar_chart:", layout="wide")

# Load the model from disk
diabetes_model = pickle.load(open('C:/Users/arshy/disease-prediction/saved_models/diabetes_model.sav','rb'))

#heart_model = pickle.load(open('C:/Users/arshy/disease-prediction/saved_models/heart_model.sav','rb'))

heart_model = pickle.load(open('C:/Users/arshy/Downloads/heart_model.sav','rb'))

parkinson_model = pickle.load(open('C:/Users/arshy/disease-prediction/saved_models/parkinson_model.sav','rb'))

result = 0


# --- USER AUTHENTICATION ---
names = ["Aditi", "Aryan"]
usernames = ["aditi", "aryan"]


# load hashed passwords
file_path = Path(__file__).parent / "hashed_pw.pkl"
with file_path.open("rb") as file:
    hashed_passwords = pickle.load(file)

authenticator = stauth.Authenticate(names, usernames, hashed_passwords,
    "disease_dashboard", "abcdef", cookie_expiry_days=30)

name, authentication_status, username = authenticator.login("Login", "main")

if authentication_status == False:
    st.error("Username/password is incorrect")

if authentication_status == None:
    st.warning("Please enter your username and password")
authenticator.logout("Logout", "sidebar")

if authentication_status:
    #sidebar for navigate
    with st.sidebar:
        
        st.sidebar.title(f"Welcome {name}")
        selected = option_menu('Multiple Disease Prediction System',
                               ['Diabetes Prediction',
                                'Heart Disease Prediction',
                                'Parkinsons Prediction'],
                               icons = ['activity','heart','person'],
                               default_index=0)
        
    # Diabetes Prediction Page
    if (selected == 'Diabetes Prediction'):
        # page title
        st.title('Diabetes Prediction using ML')
        gender = st.radio("Select gender:", options=["Male", "Female"])
        if gender == "Female":
            Pregnancies = st.text_input('Number of Pregnancies')
        else:
            Pregnancies = 0
        Glucose = st.text_input('Glucose Level')
        BloodPressure = st.text_input('Blood Pressure value')
        SkinThickness = st.text_input('Skin Thickness value')
        Insulin = st.text_input('Insulin Level')
        BMI = st.text_input('BMI value')
        DiabetesPedigreeFunction = st.text_input('Diabetes Pedigree Function value')
        Age = st.text_input('Age of the Person')
        
        
        # code for Prediction
        diab_diagnosis = ''
        
        # creating a button for Prediction
        if st.button('Diabetes Test Result'):
            diab_prediction = diabetes_model.predict([[Pregnancies, Glucose, BloodPressure, SkinThickness, Insulin, BMI, DiabetesPedigreeFunction, Age]])
            
            if (diab_prediction[0] == 1):
              diab_diagnosis = 'The person is diabetic'
            else:
              diab_diagnosis = 'The person is not diabetic'
        result = diab_diagnosis    
        st.success(diab_diagnosis)
        text_contents = '''
        Report generated by the ML Model : \\
        Name : aditi \\
        Result : '''
        
        disclaimer = '''
        
        
        
        Disclaimer : This website offers disease likelihood predictions based on a machine learning model and dataset. Not a substitute for professional medical advice, diagnosis, or treatment. Predictions may not be accurate, and individual variations may not be considered. Consult a healthcare professional for personalized advice. Information provided is for informational purposes only; no doctor-patient relationship is established. Use at your own discretion, and the operators disclaim any liability for decisions made based on the predictions.
        
        '''
        text = '''Result : '''
       
        export_as_pdf = st.download_button(label='Download file',data =text_contents + diab_diagnosis + disclaimer,file_name = 'myresult.txt')
        
        def create_download_link(val, filename):
            b64 = base64.b64encode(val)  # val looks like b'...'
            return f'<a href="data:application/octet-stream;base64,{b64.decode()}" download="{filename}.pdf">Download file</a>'
        
        if export_as_pdf:
            pdf = FPDF()
            pdf.add_page()
            pdf.set_font('Arial', 'B', 16)
            pdf.cell(200, 10, txt="Report", ln=True, align="C")
        
            # Add user details
            pdf.set_font("Arial", "I", 12)
            pdf.cell(200, 10, txt=f"Name: {username}", ln=True, align="L")
            #pdf.cell(200,10,text + heart_diagnosis,ln=True,align="L")
            #pdf.cell(200, 10, txt=f"Result: {result}", ln=True, align="L")
            pdf.cell(200,10,txt = "Result :" + result,ln=True,align="L")
            pdf.cell(200,10,result,ln=True,align="L")
            # Add disclaimer
            pdf.set_font("Arial", "I", 10)
            pdf.ln(10)  # Add some space
            pdf.multi_cell(0, 10, txt="Disclaimer: This report is for informational purposes only.", align="L")
        
            
            html = create_download_link(pdf.output(dest="S").encode("latin-1"), "test")
        
            st.markdown(html, unsafe_allow_html=True)
    
    
    
    
    # Heart Disease Prediction Page
    if (selected == 'Heart Disease Prediction'):
        # page title
        st.title('Heart Disease Prediction using ML')
        
        age = st.number_input('Age')
        #sex = st.number_input('Sex')
        gender = st.radio("Select gender:", options=["Male", "Female"])
        if gender == "Female":
            sex = 0
        else:
            sex = 1
        
        cp = st.number_input('Chest Pain types')
        trestbps = st.number_input('Resting Blood Pressure')
        chol = st.number_input('Serum Cholestoral in mg/dl')
        fbs = st.number_input('Fasting Blood Sugar > 120 mg/dl')
        restecg = st.number_input('Resting Electrocardiographic results')
        thalach = st.number_input('Maximum Heart Rate achieved')
        exang = st.number_input('Exercise Induced Angina')
        oldpeak = st.number_input('ST depression induced by exercise')
        slope = st.number_input('Slope of the peak exercise ST segment')
        ca = st.number_input('Major vessels colored by flourosopy')
        thal = st.number_input('thal: 0 = normal; 1 = fixed defect; 2 = reversable defect')
         
        # code for Prediction
        heart_diagnosis = ''
        
        # creating a button for Prediction
        
        if st.button('Heart Disease Test Result'):
            heart_prediction = heart_model.predict([[age, sex, cp, trestbps, chol, fbs, restecg,thalach,exang,oldpeak,slope,ca,thal]])
            #  arr = np.array([[int(age),int(sex),int(cp),int(trestbps),int(chol),int(fbs),int(restecg),int(thalach),int(exang),int(oldpeak),int(slope),int(ca),int(thal)]])                       
            
            if (heart_prediction[0] == 1):
              heart_diagnosis = 'The person is having heart disease'
              result = 1
            else:
              heart_diagnosis = 'The person does not have any heart disease'
              result = 0
            
        st.success(heart_diagnosis)
        #st.success(result)
    #result = heart_diagnosis   
        text_contents = '''
        Report generated by the ML Model : \\
        Name : aditi \\
        Result : '''
        
        disclaimer = '''
        
        
        
        Disclaimer : This website offers disease likelihood predictions based on a machine learning model and dataset. Not a substitute for professional medical advice, diagnosis, or treatment. Predictions may not be accurate, and individual variations may not be considered. Consult a healthcare professional for personalized advice. Information provided is for informational purposes only; no doctor-patient relationship is established. Use at your own discretion, and the operators disclaim any liability for decisions made based on the predictions.
        
        '''
        text = '''Result : '''
       
        export_as_pdf = st.download_button(label='Download file',data =text_contents + heart_diagnosis + disclaimer,file_name = 'myresult.txt')
        
        def create_download_link(val, filename):
            b64 = base64.b64encode(val)  # val looks like b'...'
            return f'<a href="data:application/octet-stream;base64,{b64.decode()}" download="{filename}.pdf">Download file</a>'
        
        if export_as_pdf:
            pdf = FPDF()
            pdf.add_page()
            pdf.set_font('Arial', 'B', 16)
            pdf.cell(200, 10, txt="Report", ln=True, align="C")
        
            # Add user details
            pdf.set_font("Arial", "I", 12)
            pdf.cell(200, 10, txt=f"Name: {username}", ln=True, align="L")
            #pdf.cell(200,10,text + heart_diagnosis,ln=True,align="L")
            #pdf.cell(200, 10, txt=f"Result: {result}", ln=True, align="L")
            if(result == 0):
                pdf.cell(200,10,txt = "Result :  The person is not having heart disease",ln=True,align="L")
            else:
                pdf.cell(200,10,txt = "Result :  The person is having heart disease",ln=True,align="L")
            pdf.cell(200,10,result,ln=True,align="L")
            # Add disclaimer
            pdf.set_font("Arial", "I", 10)
            pdf.ln(10)  # Add some space
            pdf.multi_cell(0, 10, txt="Disclaimer: This report is for informational purposes only.", align="L")
        
            
            html = create_download_link(pdf.output(dest="S").encode("latin-1"), "test")
        
            st.markdown(html, unsafe_allow_html=True)   
        
        
    
    # Parkinson's Prediction Page
    if (selected == "Parkinsons Prediction"):
        
        # page title
        st.title("Parkinson's Disease Prediction using ML")
        
        fo = st.text_input('MDVP:Fo(Hz)')
        fhi = st.text_input('MDVP:Fhi(Hz)')
        flo = st.text_input('MDVP:Flo(Hz)')
        Jitter_percent = st.text_input('MDVP:Jitter(%)')
        Jitter_Abs = st.text_input('MDVP:Jitter(Abs)')
        RAP = st.text_input('MDVP:RAP')
        PPQ = st.text_input('MDVP:PPQ')
        DDP = st.text_input('Jitter:DDP')
        Shimmer = st.text_input('MDVP:Shimmer')
        Shimmer_dB = st.text_input('MDVP:Shimmer(dB)')
        APQ3 = st.text_input('Shimmer:APQ3')
        APQ5 = st.text_input('Shimmer:APQ5')
        APQ = st.text_input('MDVP:APQ')
        DDA = st.text_input('Shimmer:DDA')
        NHR = st.text_input('NHR')
        HNR = st.text_input('HNR')
        RPDE = st.text_input('RPDE')
        DFA = st.text_input('DFA')
        spread1 = st.text_input('spread1')
        spread2 = st.text_input('spread2')
        D2 = st.text_input('D2')
        PPE = st.text_input('PPE')
            
        
        
        # code for Prediction
        parkinsons_diagnosis = ''
        
        # creating a button for Prediction    
        if st.button("Parkinson's Test Result"):
            parkinsons_prediction = parkinson_model.predict([[fo, fhi, flo, Jitter_percent, Jitter_Abs, RAP, PPQ,DDP,Shimmer,Shimmer_dB,APQ3,APQ5,APQ,DDA,NHR,HNR,RPDE,DFA,spread1,spread2,D2,PPE]])                          
            
            if (parkinsons_prediction[0] == 1):
              parkinsons_diagnosis = "The person has Parkinson's disease"
            else:
              parkinsons_diagnosis = "The person does not have Parkinson's disease"
        result = parkinsons_diagnosis    
        st.success(parkinsons_diagnosis)
        text_contents = '''
        Report generated by the ML Model : \\
        Name : aditi\\
        Result : '''
        
        disclaimer = '''
        
        
        
        Disclaimer : This website offers disease likelihood predictions based on a machine learning model and dataset. Not a substitute for professional medical advice, diagnosis, or treatment. Predictions may not be accurate, and individual variations may not be considered. Consult a healthcare professional for personalized advice. Information provided is for informational purposes only; no doctor-patient relationship is established. Use at your own discretion, and the operators disclaim any liability for decisions made based on the predictions.
        
        '''
        text = '''Result : '''
       
        export_as_pdf = st.download_button(label='Download file',data =text_contents + parkinsons_diagnosis + disclaimer,file_name = 'myresult.txt')
        
        def create_download_link(val, filename):
            b64 = base64.b64encode(val)  # val looks like b'...'
            return f'<a href="data:application/octet-stream;base64,{b64.decode()}" download="{filename}.pdf">Download file</a>'
        
        if export_as_pdf:
            pdf = FPDF()
            pdf.add_page()
            pdf.set_font('Arial', 'B', 16)
            pdf.cell(200, 10, txt="Report", ln=True, align="C")
        
            # Add user details
            pdf.set_font("Arial", "I", 12)
            pdf.cell(200, 10, txt=f"Name: {username}", ln=True, align="L")
            #pdf.cell(200,10,text + heart_diagnosis,ln=True,align="L")
            #pdf.cell(200, 10, txt=f"Result: {result}", ln=True, align="L")
            #pdf.cell(200,10,txt = "Result :" + result,ln=True,align="L")
            pdf.cell(200,10,result,ln=True,align="L")
            # Add disclaimer
            pdf.set_font("Arial", "I", 10)
            pdf.ln(10)  # Add some space
            pdf.multi_cell(0, 10, txt="Disclaimer: This report is for informational purposes only.", align="L")
        
            
            html = create_download_link(pdf.output(dest="S").encode("latin-1"), "test")
        
            st.markdown(html, unsafe_allow_html=True)
        
    


#62,0,0,140,268,0,0,129,1,2.6,1,2,3)
#(62,0,0,140,268,0,0,160,0,3.6,0,2,2)
